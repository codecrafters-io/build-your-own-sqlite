@@ -35,35 +35,31 @@
 		pageHeader := parsePageHeader(databaseFile)

 		cellPointers := make([]uint16, pageHeader.NumberOfCells)

 		for i := 0; i < int(pageHeader.NumberOfCells); i++ {
 			cellPointers[i] = parseUInt16(databaseFile)
 		}

 		var sqliteSchemaRows []SQLiteSchemaRow

 		for _, cellPointer := range cellPointers {
 			_, _ = databaseFile.Seek(int64(cellPointer), io.SeekStart)
 			parseVarint(databaseFile) // number of bytes in payload
 			parseVarint(databaseFile) // rowid
 			record := parseRecord(databaseFile, 5)

 			sqliteSchemaRows = append(sqliteSchemaRows, SQLiteSchemaRow{
 				_type:    string(record.values[0].([]byte)),
 				name:     string(record.values[1].([]byte)),
 				tblName:  string(record.values[2].([]byte)),
 				rootPage: int(record.values[3].(uint8)),
 				sql:      string(record.values[4].([]byte)),
 			})
 		}

-		// You can use print statements as follows for debugging, they'll be visible when running tests.
-		fmt.Println("Logs from your program will appear here!")
-
-		// Uncomment this to pass the first stage
-		// fmt.Printf("number of tables: %v", len(sqliteSchemaRows))
+		fmt.Printf("number of tables: %v", len(sqliteSchemaRows))
 	default:
 		fmt.Println("Unknown command", command)
 		os.Exit(1)
 	}
 }
