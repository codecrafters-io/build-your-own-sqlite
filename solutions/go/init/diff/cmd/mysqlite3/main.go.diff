@@ -23,38 +23,34 @@
 	case ".dbinfo":
 		err = dbinfo(dbPath)
 	default:
 		err = fmt.Errorf("unknown command: %v", command)
 	}

 	if err != nil {
 		fmt.Fprintf(os.Stderr, "error: %v\n", err)
 		os.Exit(1)
 	}
 }

 func dbinfo(dbpath string) (err error) {
 	db, err := sqlite.Open(dbpath)
 	if err != nil {
 		return fmt.Errorf("open db: %w", err)
 	}

 	defer func() {
 		e := db.Close()
 		if err == nil && e != nil {
 			err = fmt.Errorf("close db: %w", e)
 		}
 	}()

-	// You can use print statements as follows for debugging, they'll be visible when running tests.
-	fmt.Println("Logs from your program will appear here!")
+	info, err := db.Info()
+	if err != nil {
+		return fmt.Errorf("get db info: %w", err)
+	}

-	// Uncomment this to pass the first stage
-	// info, err := db.Info()
-	// if err != nil {
-	// 	return fmt.Errorf("get db info: %w", err)
-	// }
-	//
-	// fmt.Printf("number of tables: %v\n", info.Tables)
+	fmt.Printf("number of tables: %v\n", info.Tables)

 	return nil
 }
