@@ -40,32 +40,28 @@
     with open(database_file_path, "rb") as database_file:
         database_file.seek(100)  # Skip the header section
         page_header = PageHeader.parse_from(database_file)
         database_file.seek(100+8)  # Skip the database header & b-tree page header, get to the cell pointer array

         cell_pointers = [int.from_bytes(database_file.read(2), "big") for _ in range(page_header.number_of_cells)]

         sqlite_schema_rows = []

         # Each of these cells represents a row in the sqlite_schema table.
         for cell_pointer in cell_pointers:
             database_file.seek(cell_pointer)
             _number_of_bytes_in_payload = parse_varint(database_file)
             rowid = parse_varint(database_file)
             record = parse_record(database_file, 5)

             # Table contains columns: type, name, tbl_name, rootpage, sql
             sqlite_schema_rows.append({
                 'type': record[0],
                 'name': record[1],
                 'tbl_name': record[2],
                 'rootpage': record[3],
                 'sql': record[4],
             })

-        # You can use print statements as follows for debugging, they'll be visible when running tests.
-        print("Logs from your program will appear here!")
-
-        # Uncomment this to pass the first stage
-        # print(f"number of tables: {len(sqlite_schema_rows)}")
+        print(f"number of tables: {len(sqlite_schema_rows)}")
 else:
     print(f"Invalid command: {command}")
